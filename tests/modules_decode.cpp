#include "tests.hpp"
#include "modules.hpp"

#include "libavcodec/avcodec.h" //FIXME: there should be none of the modules include at the application level

#include "decode/libav_decode.hpp"
#include "in/file.hpp"
#include "out/null.hpp"
#include "transform/audio_convert.hpp"

using namespace Tests;
using namespace Modules;

namespace {
Decode::LibavDecode* createMp3Decoder() {
	AVCodecContext avContext;
	memset(&avContext, 0, sizeof avContext);
	avContext.codec_type = AVMEDIA_TYPE_AUDIO;
	avContext.codec_id = AV_CODEC_ID_MP3;
	PropsDecoder props(&avContext);
	return new Decode::LibavDecode(props);
}

std::shared_ptr<Data> getTestMp3Frame() {
	static const uint8_t mp3_sine_frame[] = {
		0xff, 0xfb, 0x30, 0xc0, 0x00, 0x00, 0x00, 0x00,
	 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x49, 0x6e, 0x66, 0x6f,
	 	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x29,
		0x00, 0x00, 0x19, 0xb6, 0x00, 0x0c, 0x0c, 0x12,
	 	0x12, 0x18, 0x18, 0x18, 0x1e, 0x1e, 0x24, 0x24,
		0x24, 0x2a, 0x2a, 0x30, 0x30, 0x30, 0x36, 0x36,
	 	0x3c, 0x3c, 0x43, 0x43, 0x43, 0x49, 0x49, 0x4f,
		0x4f, 0x4f, 0x55, 0x55, 0x5b, 0x5b, 0x5b, 0x61,
	 	0x61, 0x67, 0x67, 0x67, 0x6d, 0x6d, 0x73, 0x73,
		0x79, 0x79, 0x79, 0x7f, 0x7f, 0x86, 0x86, 0x86,
	 	0x8c, 0x8c, 0x92, 0x92, 0x92, 0x98, 0x98, 0x9e,
		0x9e, 0xa4, 0xa4, 0xa4, 0xaa, 0xaa, 0xb0, 0xb0,
	 	0xb0, 0xb6, 0xb6, 0xbc, 0xbc, 0xbc, 0xc3, 0xc3,
		0xc9, 0xc9, 0xc9, 0xcf, 0xcf, 0xd5, 0xd5, 0xdb,
	 	0xdb, 0xdb, 0xe1, 0xe1, 0xe7, 0xe7, 0xe7, 0xed,
		0xed, 0xf3, 0xf3, 0xf3, 0xf9, 0xf9, 0xff, 0xff,
	 	0x00, 0x00, 0x00, 0x00
	};

	return std::make_shared<DataAVPacket>(sizeof mp3_sine_frame);
}

}

unittest("decoder: audio simple") {

	auto decoder = uptr(createMp3Decoder());

	auto null = uptr(new Out::Null);
	ConnectPinToModule(decoder->getPin(0), null);

	auto frame = getTestMp3Frame();
	decoder->process(frame);
}

unittest("decoder: audio converter") {

	auto decoder = uptr(createMp3Decoder());

	//create an audio resampler
#if 0 //TODO
	auto audioConverter = uptr(new Transform::AudioConvert());
	ConnectToModule(decoder->getPin(0)->getSignal(), audioConverter);
#endif

	auto frame = getTestMp3Frame();
	decoder->process(frame);
}


