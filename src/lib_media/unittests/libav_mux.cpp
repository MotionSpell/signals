#include "lib_media/mux/libav_mux.hpp" // MuxConfig

#include "lib_media/common/attributes.hpp"
#include "lib_media/common/metadata.hpp" // MetadataPktAudio
#include "lib_media/common/pcm.hpp"
#include "lib_modules/modules.hpp"
#include "lib_modules/utils/loader.hpp"
#include "tests/tests.hpp"

using namespace Tests;
using namespace Modules;

namespace {

template<size_t numBytes>
std::shared_ptr<DataBase> createPacket(uint8_t const (&bytes)[numBytes]) {
  auto pkt = std::make_shared<DataRaw>(numBytes);
  memcpy(pkt->buffer->data().ptr, bytes, numBytes);
  return pkt;
}

std::shared_ptr<DataBase> getTestMp3Frame() {
  static const uint8_t mp3_sine_frame[] = {0xff, 0xfb, 0x30, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x6e, 0x66, 0x6f, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x29, 0x00,
        0x00, 0x19, 0xb6, 0x00, 0x0c, 0x0c, 0x12, 0x12, 0x18, 0x18, 0x18, 0x1e, 0x1e, 0x24, 0x24, 0x24, 0x2a, 0x2a,
        0x30, 0x30, 0x30, 0x36, 0x36, 0x3c, 0x3c, 0x43, 0x43, 0x43, 0x49, 0x49, 0x4f, 0x4f, 0x4f, 0x55, 0x55, 0x5b,
        0x5b, 0x5b, 0x61, 0x61, 0x67, 0x67, 0x67, 0x6d, 0x6d, 0x73, 0x73, 0x79, 0x79, 0x79, 0x7f, 0x7f, 0x86, 0x86,
        0x86, 0x8c, 0x8c, 0x92, 0x92, 0x92, 0x98, 0x98, 0x9e, 0x9e, 0xa4, 0xa4, 0xa4, 0xaa, 0xaa, 0xb0, 0xb0, 0xb0,
        0xb6, 0xb6, 0xbc, 0xbc, 0xbc, 0xc3, 0xc3, 0xc9, 0xc9, 0xc9, 0xcf, 0xcf, 0xd5, 0xd5, 0xdb, 0xdb, 0xdb, 0xe1,
        0xe1, 0xe7, 0xe7, 0xe7, 0xed, 0xed, 0xf3, 0xf3, 0xf3, 0xf9, 0xf9, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00};

  auto meta = std::make_shared<MetadataPktAudio>();
  meta->numChannels = 1;
  meta->sampleRate = 44100;
  meta->bitsPerSample = 16;
  meta->frameSize = 0;
  meta->planar = 1;
  meta->format = F32;
  meta->layout = {};
  meta->codec = "mp3";

  auto r = createPacket(mp3_sine_frame);
  r->setMetadata(meta);
  r->set(CueFlags{});
  r->set(DecodingTime{});
  return r;
}
}

secondclasstest("LibavMux: audio simple") {
  MuxConfig cfg{};
  cfg.format = "mpegts";
  cfg.path = "out/libavmux_audiosimple.ts";

  auto muxer = loadModule("LibavMux", &NullHost, &cfg);

  for(int i = 0; i < 30; ++i) {
    auto frame = getTestMp3Frame();
    muxer->getInput(0)->push(frame);
  }
  muxer->flush();
}
