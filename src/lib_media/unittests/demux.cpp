#include "tests/tests.hpp"
#include "lib_modules/modules.hpp"
#include "lib_modules/utils/loader.hpp"
#include "lib_media/common/attributes.hpp"
#include "lib_media/common/metadata.hpp"
#include "lib_media/demux/gpac_demux_mp4_simple.hpp"
#include "lib_media/demux/libav_demux.hpp"
#include "lib_media/in/file.hpp"
#include "lib_media/out/print.hpp"
#include "lib_utils/tools.hpp"
#include "lib_utils/string_tools.hpp"
#include <iostream> // std::cout

using namespace Tests;
using namespace Modules;
using namespace std;

namespace {
vector<int64_t> deltas(vector<int64_t> times) {
	vector<int64_t> r;
	for(int i=0; i < (int)times.size()-1; ++i)
		r.push_back(times[i+1] - times[i]);
	return r;
}
}
// sohaib: failing , segmentation fault  
// at the moment, the demuxer discards the first frame
// unittest("LibavDemux: simple: 75 frames") {

// 	struct MyOutput : ModuleS {
// 		void processOne(Data data) override {
// 			if(isDeclaration(data))
// 				return;
// 			++frameCount;
// 		}
// 		int frameCount = 0;
// 	};

// 	DemuxConfig cfg;
// 	cfg.url = "data/simple.ts";
// 	auto demux = loadModule("LibavDemux", &NullHost, &cfg);
// 	auto rec = createModule<MyOutput>();
// 	ConnectOutputToInput(demux->getOutput(0), rec->getInput(0));

// 	for(int i=0; i < 100; ++i)
// 		demux->process();
// 	demux->flush();

// 	ASSERT_EQUALS(75, rec->frameCount);
// }

// unittest("LibavDemux: rollover") {

// 	struct MyOutput : ModuleS {
// 		vector<int64_t> times, decodingTimes;
// 		void processOne(Data data) override {
// 			if(isDeclaration(data))
// 				return;
// 			times.push_back(data->get<PresentationTime>().time);
// 			decodingTimes.push_back(data->get<DecodingTime>().time);
// 		}
// 	};

// 	DemuxConfig cfg;
// 	cfg.url = "data/rollover.ts";
// 	auto demux = loadModule("LibavDemux", &NullHost, &cfg);
// 	auto rec = createModule<MyOutput>();
// 	ConnectOutputToInput(demux->getOutput(0), rec->getInput(0));

// 	for(int i=0; i < 100; ++i)
// 		demux->process();
// 	demux->flush();

// 	vector<int64_t> expected(74, 7200);
// 	ASSERT_EQUALS(expected, deltas(rec->times));
// 	ASSERT_EQUALS(expected, deltas(rec->decodingTimes));
// }

unittest("empty param test: Demux") {
	Mp4DemuxConfig cfg {};
	ASSERT_THROWN(loadModule("GPACDemuxMP4Simple", &NullHost, &cfg));
}

secondclasstest("demux one track: Demux::GPACDemuxMP4Simple -> Out::Print") {
	Mp4DemuxConfig cfg { "data/beepbop.mp4"};
	auto mp4Demux = loadModule("GPACDemuxMP4Simple", &NullHost, &cfg);
	auto p = createModule<Out::Print>(&NullHost, std::cout);

	ConnectOutputToInput(mp4Demux->getOutput(0), p->getInput(0));

	for(int i=0; i < 100; ++i)
		mp4Demux->process();
}

unittest("GPACDemuxMP4Full: simple demux one track") {
	auto f = createModule<In::File>(&NullHost, "data/beepbop.mp4");
	auto mp4Demux = loadModule("GPACDemuxMP4Full", &NullHost, nullptr);

	int sampleCount = 0;
	auto onSample = [&](Data) {
		++sampleCount;
	};

	ConnectOutputToInput(f->getOutput(0), mp4Demux->getInput(0));
	ConnectOutput(mp4Demux->getOutput(0), onSample);

	for(int i=0; i < 100; ++i)
		f->process();

	ASSERT_EQUALS(215, sampleCount);
}

unittest("GPACDemuxMP4Full: simple demux one empty track") {
	auto f = createModule<In::File>(&NullHost, "data/emptytrack.mp4");
	auto mp4Demux = loadModule("GPACDemuxMP4Full", &NullHost, nullptr);

	int sampleCount = 0;
	auto onSample = [&](Data) {
		++sampleCount;
	};

	ConnectOutputToInput(f->getOutput(0), mp4Demux->getInput(0));
	ConnectOutput(mp4Demux->getOutput(0), onSample);

	f->process();

	ASSERT_EQUALS(0, sampleCount);

	auto meta = safe_cast<const MetadataPkt>(mp4Demux->getOutput(0)->getMetadata());
	ASSERT_EQUALS("0142C028FFE1001A6742C028116401E0089F961000000300100000030320F1832480010006681020B8CB20",
	    string2hex(meta->codecSpecificInfo.data(), meta->codecSpecificInfo.size()));
}

unittest("GPACDemuxMP4Full: demux fragments") {
	auto f = createModule<In::File>(&NullHost, "data/fragments.mp4");
	auto mp4Demux = loadModule("GPACDemuxMP4Full", &NullHost, nullptr);

	int sampleCount = 0;
	auto onSample = [&](Data) {
		++sampleCount;
	};

	ConnectOutputToInput(f->getOutput(0), mp4Demux->getInput(0));
	ConnectOutput(mp4Demux->getOutput(0), onSample);

	f->process();

	ASSERT_EQUALS(820, sampleCount);
}


unittest("[DISABLED] GPACDemuxMP4Full: fmp4 simple: one frame per fragment") {

	struct FrameCounter : ModuleS {
		void processOne(Data) override {
			++frameCount;
		}
		int frameCount = 0;
	};

	auto demux = loadModule("GPACDemuxMP4Full", &NullHost, nullptr);
	auto rec = createModule<FrameCounter>();
	ConnectOutputToInput(demux->getOutput(0), rec->getInput(0));

	auto push = [&](vector<uint8_t> bytes) {
		auto pkt = make_shared<DataRaw>(bytes.size());
		memcpy(pkt->buffer->data().ptr, bytes.data(), bytes.size());
		demux->getInput(0)->push(pkt);
		demux->process();
	};

	push({ 0x00, 0x00, 0x00, 0x18, 'f', 't', 'y', 'p', 'i', 's', 'o', 'm', 0x00, 0x00, 0x00, 0x01, 'i', 's', 'o', 'm', 'd', 'a', 's', 'h', 0x00, 0x00, 0x02, 'q', 'm', 'o', 'o', 'v', 0x00, 0x00, 0x00, 'l', 'm', 'v', 'h', 'd', 0x00, 0x00, 0x00, 0x00, 0xd9, 0x23, 0xd4, 0x5e, 0xd9, 0x23, 0xd4, 0x5e, 0x00, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, 'm', 'v', 'e', 'x', 0x00, 0x00, 0x00, 0x10, 'm', 'e', 'h', 'd', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 't', 'r', 'e', 'x', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 'd', 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc5, 't', 'r', 'a', 'k', 0x00, 0x00, 0x00, 0x5c, 't', 'k', 'h', 'd', 0x00, 0x00, 0x00, 0x01, 0xd9, 0x23, 0xd4, 0x5e, 0xd9, 0x23, 0xd4, 0x5e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 'a', 'm', 'd', 'i', 'a', 0x00, 0x00, 0x00, 0x20, 'm', 'd', 'h', 'd', 0x00, 0x00, 0x00, 0x00, 0xd9, 0x23, 0xd4, 0x5e, 0xd9, 0x23, 0xd4, 0x5e, 0x00, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x55, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 'h', 'd', 'l', 'r', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 'v', 'i', 'd', 'e', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x50, 0x41, 0x43, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x56, 'i', 'd', 'e', 'o', 0x20, 0x48, 'a', 'n', 'd', 'l', 'e', 'r', 0x00, 0x00, 0x00, 0x01, 0x02, 'm', 'i', 'n', 'f', 0x00, 0x00, 0x00, 0x14, 'v', 'm', 'h', 'd', 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 'd', 'i', 'n', 'f', 0x00, 0x00, 0x00, 0x1c, 'd', 'r', 'e', 'f', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0c, 'u', 'r', 'l', 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc2, 's', 't', 'b', 'l', 0x00, 0x00, 0x00, 'f', 's', 't', 's', 'd', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 'c', 'w', 'i', 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x47, 0x50, 0x41, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xff, 0xff, 0x00, 0x00, 0x00, 0x10, 's', 't', 't', 's', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 's', 't', 's', 's', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 's', 't', 's', 'c', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 's', 't', 's', 'z', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 's', 't', 'c', 'o', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, });
	push({ 0x00, 0x00, 0x00, 0x6c, 'm', 'o', 'o', 'f', 0x00, 0x00, 0x00, 0x10, 'm', 'f', 'h', 'd', 0x00, 0x00, 0x00, 0x00, 0xd0, 0xfd, 0x91, 0xc6, 0x00, 0x00, 0x00, 0x54, 't', 'r', 'a', 'f', 0x00, 0x00, 0x00, 0x1c, 't', 'f', 'h', 'd', 0x00, 0x02, 0x00, 0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 't', 'f', 'd', 't', 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 'k', 0x46, 0x19, 0xe2, 0xb0, 0x00, 0x00, 0x00, 0x1c, 't', 'r', 'u', 'n', 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 't', 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 'm', 'd', 'a', 't', 0x11, 0x22, 0x33, 0x44, 0x55, 'f', 'w', 0x88, });
	push({ 0x00, 0x00, 0x00, 0x6c, 'm', 'o', 'o', 'f', 0x00, 0x00, 0x00, 0x10, 'm', 'f', 'h', 'd', 0x00, 0x00, 0x00, 0x00, 0xd0, 0xfd, 0x91, 0xc7, 0x00, 0x00, 0x00, 0x54, 't', 'r', 'a', 'f', 0x00, 0x00, 0x00, 0x1c, 't', 'f', 'h', 'd', 0x00, 0x02, 0x00, 0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 't', 'f', 'd', 't', 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 'k', 0x46, 0x19, 0xe3, 0x78, 0x00, 0x00, 0x00, 0x1c, 't', 'r', 'u', 'n', 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 't', 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 'm', 'd', 'a', 't', 0x11, 0x22, 0x33, 0x44, 0x55, 'f', 'w', 0x88, });
	push({ 0x00, 0x00, 0x00, 0x6c, 'm', 'o', 'o', 'f', 0x00, 0x00, 0x00, 0x10, 'm', 'f', 'h', 'd', 0x00, 0x00, 0x00, 0x00, 0xd0, 0xfd, 0x91, 0xc8, 0x00, 0x00, 0x00, 0x54, 't', 'r', 'a', 'f', 0x00, 0x00, 0x00, 0x1c, 't', 'f', 'h', 'd', 0x00, 0x02, 0x00, 0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 't', 'f', 'd', 't', 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 'k', 0x46, 0x19, 0xe4, 0x40, 0x00, 0x00, 0x00, 0x1c, 't', 'r', 'u', 'n', 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 't', 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 'm', 'd', 'a', 't', 0x11, 0x22, 0x33, 0x44, 0x55, 'f', 'w', 0x88, });
	demux->flush();

	ASSERT_EQUALS(3, rec->frameCount);
};

