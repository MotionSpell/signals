#include "tests/tests.hpp"
#include "lib_modules/modules.hpp"
#include "lib_modules/utils/loader.hpp"
#include "lib_media/common/metadata.hpp"
#include "lib_media/common/attributes.hpp"
#include "../telx2ttml.hpp"
#include "lib_utils/log_sink.hpp"
#include "lib_utils/log.hpp" // g_Log
#include <string.h>

using std::make_shared;
using namespace Tests;
using namespace Modules;

namespace {
std::shared_ptr<DataBase> createPacket(SpanC bytes) {
	auto pkt = make_shared<DataRaw>(bytes.len);
	memcpy(pkt->buffer->data().ptr, bytes.ptr, bytes.len);
	return pkt;
}

std::shared_ptr<DataBase> getTeletextTestFrame() {
	static const uint8_t teletext[] = {
		// garbage data
		0xde, 0x03, 0x2c, 0x03, 0xde, 0x07, 0x55, 0x00, 0x00,
	};

	auto r = createPacket(teletext);
	r->setMetadata(make_shared<MetadataPkt>(SUBTITLE_PKT));
	return r;
}
}

unittest("telx2ttml: simple") {
	TeletextToTtmlConfig cfg;
	auto reader = loadModule("TeletextToTTML", &NullHost, &cfg);
	reader->getInput(0)->push(getTeletextTestFrame());
	reader->process();
}

static
void testTelx(std::vector<uint8_t> data) {

	TeletextToTtmlConfig cfg;
	cfg.splitDurationInMs = 2000;
	auto reader = loadModule("TeletextToTTML", &NullHost, &cfg);

	for(int i=0; i < 5; ++i) {
		auto pkt = createPacket({data.data(), data.size()});
		pkt->setMetadata(make_shared<MetadataPkt>(SUBTITLE_PKT));
		pkt->set<PresentationTime>({i * IClock::Rate});
		reader->getInput(0)->push(pkt);
		reader->process();
	}
}

unittest("[DISABLED] telx2ttml: blind tests") {
	testTelx({ 0x00, 0x02, 0x00, 0x02 });
	testTelx({ 0x00, 0x02, 0x00, 0x02, 0x00, 0x02 });
	testTelx({ 0x00, 0x02, 0xfd, 0xce });
	testTelx({ 0x02, 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x20, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x02, 0xff, 0x02, 0x10, 0x02, 0x2c, 0x56, 0x20, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x11, 0xff, 0x7f, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x42, 0x02, 0x02, 0x02, 0x02, 0x02, 0xff, 0x0c, 0x03, 0x2c, 0x10, 0x56, 0x00, 0x02, 0x02});
	testTelx({ 0x09, 0xc0, 0x7d, 0xce});
	testTelx({ 0x09, 0xc0, 0xfd, 0xce });
	testTelx({ 0x10, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x7f, 0xdf });
	testTelx({ 0x10, 0x02, 0x2c, 0x02, 0x02, 0xfd, 0x01, 0x02, 0x02, 0xe6, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02});
	testTelx({ 0x10, 0x02, 0x2c, 0x02, 0x02, 0xfd, 0x17, 0x02});
	testTelx({ 0x10, 0x02, 0x2c, 0x02, 0x64, 0x0e, 0x0e, 0x10, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0xdf });
	testTelx({ 0x10, 0x02, 0x2c, 0x02, 0xe3, 0x00, 0xdf, 0xdf});
	testTelx({ 0x10, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x2c, 0x10, 0x02, 0x2c, 0xdf, 0xdf, 0xc3 });
	testTelx({ 0x10, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x2c, 0x10, 0x02, 0xc3, 0xc3, 0xc3, 0xc3, 0xb9, 0xc3, 0xc3});
	testTelx({ 0x10, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x2c, 0x17, 0x17, 0x13, 0x17, 0xdf});
	testTelx({ 0x10, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x0b});
	testTelx({ 0x10, 0x02, 0x2c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xdf});
	testTelx({ 0x10, 0x02, 0x2c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xeb });
	testTelx({ 0x10, 0x02, 0x2c, 0x1e, 0x09, 0xfb, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xad, 0x2c, 0x10, 0x02, 0x37, 0x2c, 0x0d, 0x02, 0x2c, 0x32, 0x10, 0x02, 0x2c, 0x0d, 0x02, 0x19, 0x2c, 0x02, 0x2c, 0x39, 0x10, 0x02, 0x2c, 0x2c, 0x0d });
	testTelx({ 0x10, 0x02, 0x2c, 0x1e, 0x2c, 0xdf});
	testTelx({ 0x10, 0x02, 0x2c, 0x29, 0x10, 0x02, 0xe8, 0xff, 0x7f, 0x00 });
	testTelx({ 0x10, 0x02, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x13, 0x40, 0x00, 0x00, 0x00, 0x2c, 0x2c, 0x2c, 0x00, 0x7f, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0xdf});
	testTelx({ 0x10, 0x02, 0x2c, 0x2c, 0x2c, 0x2c, 0x80, 0x00, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0x2c, 0x2c });
	testTelx({ 0x10, 0x02, 0x2c, 0x57, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x10, 0x02, 0x2c, 0x2c, 0x10, 0x02, 0x2c, 0xdf, 0xdf, 0xc3 });
	testTelx({ 0x10, 0x02, 0x2c, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x80, 0x00, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xdf });
	testTelx({ 0x10, 0x02, 0x2c, 0xbb, 0xbb, 0x7f, 0xdf, 0xbb, 0xbb, 0xbb, 0xff, 0xbb, 0xbb, 0xcc, 0xbb, 0x45});
	testTelx({ 0x10, 0x02, 0x2c, 0xdf});
	testTelx({ 0x10, 0x02, 0x2c, 0xdf, 0x02, 0x00, 0xdf });
	testTelx({ 0x10, 0x02, 0x2c, 0xdf, 0x10, 0x02, 0x2c, 0xdf });
	testTelx({ 0x10, 0x02, 0x2c, 0xee, 0x01, 0x54, 0x5f });
	testTelx({ 0x10, 0x02, 0x2c, 0xee, 0x01, 0x54, 0xdf });
	testTelx({ 0x10, 0x02, 0x2c, 0xff, 0x10, 0x09, 0x13, 0xdf });
	testTelx({ 0x10, 0x02, 0x2c, 0xff, 0xff, 0x7f, 0xff, 0xdf});
	testTelx({ 0x10, 0x03, 0x2c, 0x02, 0x02, 0xfd, 0x01, 0x02, 0x02, 0xe6, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02});
	testTelx({ 0x23, 0x02, 0x01, 0x10, 0x02, 0x2c, 0x56, 0x72, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x42, 0x02, 0xff, 0x02, 0x02, 0x02, 0x02, 0x02, 0xff, 0x02, 0x02, 0x02, 0xff, 0x0c, 0x03, 0x2c, 0xff, 0xff, 0x2c, 0x56, 0x10, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x08, 0x02, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02});
	testTelx({ 0x23, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x46, 0x10, 0x02, 0x2c, 0x56, 0x20, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xff, 0x0c, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0c, 0x03, 0x2c, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0c, 0x03, 0x1c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02});
	testTelx({ 0x23, 0x02, 0x2c, 0x02, 0x02, 0x02, 0x02, 0x00, 0x02, 0x02, 0x02, 0x02, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02, 0x02, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02, 0x02, 0x02, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0c, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02});
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x00, 0x80, 0xff, 0xff, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xff, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xff, 0x0c, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0c, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02});
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x02, 0x02, 0x02, 0x1e, 0x02, 0xff, 0x0c, 0x03, 0x2c, 0x05, 0xff, 0xff, 0x05, 0xff, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xff, 0x00, 0x80, 0x2c, 0x2c, 0x02, 0x02, 0x01, 0xfd, 0x02, 0xff, 0x0c, 0x03, 0x2c, 0x05, 0xff, 0xff, 0x05, 0xff, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x0c, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02 });
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x02, 0xff, 0xff, 0xff, 0x08, 0xff, 0xff, 0x08, 0x00, 0x02, 0x02, 0x02, 0xe6, 0x01, 0x02, 0x02, 0x11, 0x02, 0x40, 0x1c, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02, 0x02, 0x02, 0xea, 0x00, 0x02, 0x02, 0x02, 0xea, 0x20, 0x02, 0x02, 0x0e, 0x03, 0x2c, 0x10, 0x02, 0x00, 0x20, 0x00, 0x1d, 0x02 });
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x4f, 0x20, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xff, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xff, 0x0c, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0c, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02});
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x50, 0x20, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x22, 0x01, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x22, 0x01, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02, 0x02, 0x7f, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x4b, 0x00, 0x01, 0x02});
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x01, 0xe9, 0x02, 0x81, 0xf1, 0x02, 0x02, 0x02, 0x02, 0x02, 0x4b});
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0xf7, 0x01, 0x02, 0x81, 0xf1, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x02, 0x02});
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x02, 0x02, 0x02, 0x02, 0x4f});
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x81, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x4b });
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x01, 0x02, 0x02, 0x02, 0x4b});
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x02, 0x01, 0x02, 0x02, 0x4b});
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x02, 0x02, 0x01, 0x02, 0x4b });
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x02, 0x02, 0x02, 0x01, 0x4b});
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x02, 0x02, 0x02, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x01, 0xdf, 0x81, 0xf1, 0x4b });
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x02, 0x02, 0x02, 0x02, 0x49 });
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x02, 0x02, 0x02, 0x02, 0x4b});
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x02, 0x02, 0x02, 0x02, 0xcb});
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x03, 0x82, 0x02, 0x02, 0x4b });
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x82, 0x02, 0x02, 0x02, 0x4b });
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0xf8, 0x01, 0x02, 0x02, 0x4b});
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x80, 0xff, 0xff, 0xff, 0x02, 0x4b });
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x7f, 0x00, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x02, 0x02, 0x1b, 0x02, 0x4b});
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x21, 0x02, 0x02, 0xec, 0x01, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0xe9, 0x01, 0x02, 0xf1, 0x02, 0xe9, 0x01, 0x02, 0x4b });
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x00, 0x20, 0x02, 0x81, 0xf1, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x00, 0x20, 0x02, 0x81, 0xf1, 0x02, 0x02, 0x02, 0x02, 0x02, 0x4b});
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x18, 0x80, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0x64, 0x02, 0x02, 0x02, 0x02, 0x23, 0x12, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x07, 0x80, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x02, 0x4b });
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x02, 0x02, 0x02, 0x01, 0xf4, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x04, 0x02, 0x02, 0x02, 0x4b});
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x1f, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x02, 0x02, 0x02, 0x02, 0x4b });
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x20, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xff, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xff, 0x0c, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0c, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02 });
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x22, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xff, 0x20, 0x11, 0xf4, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0xff, 0x0c, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x5d, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0c, 0x03, 0x2c, 0x10, 0x49, 0x2c, 0x56, 0xe2, 0x01, 0x02});
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0xa0, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xff, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xff, 0x0c, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0c, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02 });
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0xd6, 0x20, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xff, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xff, 0x0c, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0c, 0x03, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x00, 0x02, 0x02 });
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x12, 0x2c, 0x56, 0x02, 0x02, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2c, 0x56, 0x05, 0xff, 0xfe, 0xe6, 0x02, 0x03, 0x02, 0x02, 0x02, 0x4b});
	testTelx({ 0x23, 0x02, 0x2c, 0x10, 0x22, 0x2c, 0x56, 0x81, 0xf1, 0x02, 0x02, 0x02, 0x23, 0x02, 0x2c, 0x10, 0x22, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0xee, 0x02, 0x02, 0x02, 0x02, 0x02, 0x08, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x09, 0xf4, 0x0a, 0x0a, 0x0a, 0x02, 0x0a, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x02, 0x02, 0x23, 0x02, 0x2c, 0x10, 0x22, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0xee, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x0a, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x4b });
	testTelx({ 0x23, 0x02, 0x2c, 0x12, 0x02, 0x2c, 0x56, 0x2c, 0x12, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x20, 0x00, 0x00, 0x00, 0x06, 0x02, 0xff, 0xff, 0xff, 0x7f, 0xf1, 0x02, 0x02, 0x02, 0x02, 0x02, 0x4b });
	testTelx({ 0x23, 0x23, 0x02, 0x47, 0x10, 0x02, 0x00, 0x80, 0x02, 0x02, 0x02, 0x02, 0x2c, 0x10, 0x02, 0x3a, 0x56, 0x02, 0x02, 0x23, 0x02, 0x47, 0x10, 0x02, 0x00, 0x80, 0x02, 0x02, 0x02, 0x02, 0x4b, 0x02, 0x2c, 0x10, 0x02, 0x02, 0x4b, 0x02, 0x2c, 0x10, 0x02, 0x3a, 0x56, 0x02, 0x02, 0x23, 0x02, 0x47, 0x10, 0x02, 0x00, 0x80, 0x02, 0x02, 0x02, 0x02, 0x4b, 0x02, 0x2c, 0x10, 0x02, 0x3a, 0x56, 0x02, 0x02, 0x02, 0x4b });
	testTelx({ 0x2e, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x2e, 0x02, 0x2c, 0x10, 0x02, 0x2c, 0x56, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x08, 0x02, 0x06, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x01, 0xf8, 0x02, 0x02, 0x02, 0x4b });
	testTelx({ 0x38, 0x02, 0x2c, 0x00, 0x0e, 0xbf, 0xff });
	testTelx({ 0x3e, 0x02, 0x2c, 0x3b, 0x02, 0x28, 0x56, 0x02, 0x58, 0x58, 0x02, 0x06, 0x02, 0x02, 0x23, 0x02, 0x2c, 0x1f, 0x02, 0x66, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x24, 0x0d, 0x02, 0x1f, 0x02, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x75, 0x2c, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xff, 0x58, 0x6e, 0x58, 0x58, 0x2c, 0x00, 0x02, 0x02, 0x02, 0xfb, 0x01, 0xff, 0x02, 0x64, 0x00, 0x06, 0x0b, 0x02, 0x28, 0x02, 0x02, 0x02, 0x02, 0x81, 0xf1, 0x02, 0x02, 0xf6, 0x89, 0xf1, 0x00, 0x00, 0x00, 0x7f, 0x06, 0x4b });
	testTelx({ 0x45, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x1f, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xfc, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xfd, 0xce});
	testTelx({ 0xe8, 0x03, 0x2c, 0xe8, 0x03, 0x2c, 0xdf, 0xdf});
	testTelx({ 0xe8, 0x22, 0x03, 0x03, 0x15, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x02, 0xed, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x02, 0xec, 0x03, 0x03, 0x03, 0x03, 0x03, 0x15, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x80, 0xed, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x02, 0xec, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x26, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x02, 0xed, 0x03, 0x03, 0x03, 0x0a, 0x03, 0x03, 0x03, 0x03, 0x21, 0x03, 0x83 });
}

fuzztest("telx2ttml") {
	SpanC testdata;
	GetFuzzTestData(testdata.ptr, testdata.len);

	auto pkt = createPacket(testdata);
	pkt->setMetadata(make_shared<MetadataPkt>(SUBTITLE_PKT));

	TeletextToTtmlConfig cfg;
	auto reader = loadModule("TeletextToTTML", &NullHost, &cfg);
	reader->getInput(0)->push(pkt);
	reader->process();
}

