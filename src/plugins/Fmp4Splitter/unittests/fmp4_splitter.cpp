#include "tests/tests.hpp"
#include "lib_modules/modules.hpp"
#include "lib_modules/utils/loader.hpp"
#include "lib_media/common/attributes.hpp"
#include "lib_media/common/metadata.hpp" //MetadataPkt
#include "lib_utils/log_sink.hpp"
#include "lib_utils/tools.hpp" //safe_cast
#include <string.h> // memcpy
#include <vector>

using namespace std;
using namespace Tests;
using namespace Modules;

namespace {

struct FrameCounter : ModuleS {
	void processOne(Data data) override {
		auto frame = vector<uint8_t>(data->data().ptr, data->data().ptr + data->data().len);
		frames.push_back(frame);
		times.push_back(data->get<PresentationTime>().time);
	}
	std::vector<std::vector<uint8_t>> frames;
	std::vector<int64_t> times;
};

}

unittest("Fmp4Splitter: easy") {

	auto demux = loadModule("Fmp4Splitter", &NullHost, nullptr);
	auto rec = createModule<FrameCounter>();
	ConnectOutputToInput(demux->getOutput(0), rec->getInput(0));

	auto push = [&](vector<uint8_t> bytes) {
		auto pkt = make_shared<DataRaw>(bytes.size());
		memcpy(pkt->buffer->data().ptr, bytes.data(), bytes.size());
		demux->getInput(0)->push(pkt);
	};

	push({ 0x00, 0x00, 0x00, 0x18, 'f', 't', 'y', 'p', 'i', 's', 'o', 'm', 0x00, 0x00, 0x00, 0x01, 'i', 's', 'o', 'm', 'd', 'a', 's', 'h', 0x00, 0x00, 0x02, 'q', 'm', 'o', 'o', 'v', 0x00, 0x00, 0x00, 'l', 'm', 'v', 'h', 'd', 0x00, 0x00, 0x00, 0x00, 0xd9, 0x23, 0xd4, 0x5e, 0xd9, 0x23, 0xd4, 0x5e, 0x00, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, 'm', 'v', 'e', 'x', 0x00, 0x00, 0x00, 0x10, 'm', 'e', 'h', 'd', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 't', 'r', 'e', 'x', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 'd', 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc5, 't', 'r', 'a', 'k', 0x00, 0x00, 0x00, 0x5c, 't', 'k', 'h', 'd', 0x00, 0x00, 0x00, 0x01, 0xd9, 0x23, 0xd4, 0x5e, 0xd9, 0x23, 0xd4, 0x5e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 'a', 'm', 'd', 'i', 'a', 0x00, 0x00, 0x00, 0x20, 'm', 'd', 'h', 'd', 0x00, 0x00, 0x00, 0x00, 0xd9, 0x23, 0xd4, 0x5e, 0xd9, 0x23, 0xd4, 0x5e, 0x00, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x55, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 'h', 'd', 'l', 'r', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 'v', 'i', 'd', 'e', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x50, 0x41, 0x43, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x56, 'i', 'd', 'e', 'o', 0x20, 0x48, 'a', 'n', 'd', 'l', 'e', 'r', 0x00, 0x00, 0x00, 0x01, 0x02, 'm', 'i', 'n', 'f', 0x00, 0x00, 0x00, 0x14, 'v', 'm', 'h', 'd', 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 'd', 'i', 'n', 'f', 0x00, 0x00, 0x00, 0x1c, 'd', 'r', 'e', 'f', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0c, 'u', 'r', 'l', 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc2, 's', 't', 'b', 'l', 0x00, 0x00, 0x00, 'f', 's', 't', 's', 'd', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 'c', 'w', 'i', 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x47, 0x50, 0x41, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xff, 0xff, 0x00, 0x00, 0x00, 0x10, 's', 't', 't', 's', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 's', 't', 's', 's', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 's', 't', 's', 'c', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 's', 't', 's', 'z', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 's', 't', 'c', 'o', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, });
	push({ 0x00, 0x00, 0x00, 0x6c, 'm', 'o', 'o', 'f', 0x00, 0x00, 0x00, 0x10, 'm', 'f', 'h', 'd', 0x00, 0x00, 0x00, 0x00, 0xd0, 0xfd, 0x91, 0xc6, 0x00, 0x00, 0x00, 0x54, 't', 'r', 'a', 'f', 0x00, 0x00, 0x00, 0x1c, 't', 'f', 'h', 'd', 0x00, 0x02, 0x00, 0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 't', 'f', 'd', 't', 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 'k', 0x46, 0x19, 0xe2, 0xb0, 0x00, 0x00, 0x00, 0x1c, 't', 'r', 'u', 'n', 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 'm', 'd', 'a', 't', 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0xAA, });
	push({ 0x00, 0x00, 0x00, 0x6c, 'm', 'o', 'o', 'f', 0x00, 0x00, 0x00, 0x10, 'm', 'f', 'h', 'd', 0x00, 0x00, 0x00, 0x00, 0xd0, 0xfd, 0x91, 0xc7, 0x00, 0x00, 0x00, 0x54, 't', 'r', 'a', 'f', 0x00, 0x00, 0x00, 0x1c, 't', 'f', 'h', 'd', 0x00, 0x02, 0x00, 0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 't', 'f', 'd', 't', 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 'k', 0x46, 0x19, 0xe3, 0x78, 0x00, 0x00, 0x00, 0x1c, 't', 'r', 'u', 'n', 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 'm', 'd', 'a', 't', 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0xBB, });
	push({ 0x00, 0x00, 0x00, 0x6c, 'm', 'o', 'o', 'f', 0x00, 0x00, 0x00, 0x10, 'm', 'f', 'h', 'd', 0x00, 0x00, 0x00, 0x00, 0xd0, 0xfd, 0x91, 0xc8, 0x00, 0x00, 0x00, 0x54, 't', 'r', 'a', 'f', 0x00, 0x00, 0x00, 0x1c, 't', 'f', 'h', 'd', 0x00, 0x02, 0x00, 0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 't', 'f', 'd', 't', 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 'k', 0x46, 0x19, 0xe4, 0x40, 0x00, 0x00, 0x00, 0x1c, 't', 'r', 'u', 'n', 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x11, 'm', 'd', 'a', 't', 0xFF, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0xCC, 0xDD});
	demux->flush();

	ASSERT_EQUALS(
	    vector<int64_t>({ 280844861400000, 280844861436000, 280844861472000 }),
	    rec->times);

	vector<vector<uint8_t>> expected;
	expected.push_back({0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0xAA});
	expected.push_back({0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0xBB});
	expected.push_back({0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0xCC, 0xDD});

	ASSERT_EQUALS(expected, rec->frames);
};

unittest("Fmp4Splitter: multiple frames per fragment (with Annex B conversion)") {
	auto demux = loadModule("Fmp4Splitter", &NullHost, nullptr);
	auto rec = createModule<FrameCounter>();
	ConnectOutputToInput(demux->getOutput(0), rec->getInput(0));

	auto push = [&](vector<uint8_t> bytes) {
		auto pkt = make_shared<DataRaw>(bytes.size());
		memcpy(pkt->buffer->data().ptr, bytes.data(), bytes.size());
		demux->getInput(0)->push(pkt);
	};

	push({
		0x00, 0x00, 0x02, 0x91, 'm', 'o', 'o', 'v', 0x00, 0x00, 0x00, 0x6c, 'm', 'v', 'h', 'd', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x5f, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, 'm', 'v', 0x65, 0x78, 0x00, 0x00, 0x00, 0x10, 'm', 0x65, 'h', 'd', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 't', 'r', 0x65, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 'd', 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe5, 't', 'r', 'a', 0x6b, 0x00, 0x00, 0x00, 0x5c, 't', 0x6b, 'h', 'd', 0x00, 0x00, 0x00, 0x01, 0xd9, 0x2f, 0xfb, 0x49, 0xd9, 0x2f, 0xfb, 0x49, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0x81, 'm', 'd', 0x69, 'a', 0x00, 0x00, 0x00, 0x20, 'm', 'd', 'h', 'd', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x5f, 0x90, 0x00, 0x00, 0x00, 0x00, 0x55, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 'h', 'd', 0x6c, 'r', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 'v', 0x69, 'd', 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x53, 0x54, 0x00, 0x00, 0x00, 0x01, 0x34, 'm', 0x69, 0x6e, 'f', 0x00, 0x00, 0x00, 0x14, 'v', 'm', 'h', 'd', 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 'd', 0x69, 0x6e, 'f', 0x00, 0x00, 0x00, 0x1c, 'd', 'r', 0x65, 'f', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0c, 0x75, 'r', 0x6c, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf4, 0x73, 't', 0x62, 0x6c, 0x00, 0x00, 0x00, 0xa8, 0x73, 't', 0x73, 'd', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x98, 'a', 'v', 0x63, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0xf0, 0x00, 0x48, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xff, 0xff, 0x00, 0x00, 0x00, 0x32, 'a', 'v', 0x63, 0x43, 0x01, 'd', 0x00, 0x0d, 0xff, 0xe1, 0x00, 0x19, 0x67, 'd', 0x00, 0x0d, 0xac, 0xd9, 0x41, 0x41, 0xfb, 0x01, 0x10, 0x00, 0x00, 0x03, 0x00, 0x10, 0x00, 0x00, 0x03, 0x03, 0x20, 0xf1, 0x42, 0x99, 0x60, 0x01, 0x00, 0x06, 'h', 0xeb, 0xe3, 0xcb, 0x22, 0xc0, 0x00, 0x00, 0x00, 0x10, 0x70, 'a', 0x73, 0x70, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x73, 't', 't', 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x73, 't', 0x73, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x73, 't', 0x73, 0x7a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x73, 't', 0x63, 'o', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x84, 'm', 'o', 'o', 'f', 0x00, 0x00, 0x00, 0x10, 'm', 'f', 'h', 'd', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6c, 't', 'r', 'a', 'f', 0x00, 0x00, 0x00, 0x10, 't', 'f', 'h', 'd', 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 't', 'f', 'd', 't', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x44, 't', 'r', 'u', 'n', 0x00, 0x00, 0x07, 0x01, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x0e, 0x10, 0x00, 0x00, 0x00,
		0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x10, 0x00, 0x00, 0x00,
		0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x10, 0x00, 0x00, 0x00,
		0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x10, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x01, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x1a, 'm', 'd', 'a', 't',
		0x00, 0x00, 0x00, 0x00, /* sample 1 */
		0x00, 0x00, 0x00, 0x01, 0xff, /* sample 2 */
		0x00, 0x00, 0x00, 0x02, 0xaa, 0xbb, /* sample 3 */
		0x00, 0x00, 0x00 /* sample 4 */
	});

	demux->flush();

	auto meta = safe_cast<const MetadataPkt>(demux->getOutput(0)->getMetadata());
	ASSERT_EQUALS(42, (int)meta->codecSpecificInfo.size());

	ASSERT_EQUALS(
	    vector<int64_t>({ 0, 7200, 14400, 21600 }),
	    rec->times);

	vector<vector<uint8_t>> expected;
	expected.push_back({0x00, 0x00, 0x00, 0x01 });
	expected.push_back({0x00, 0x00, 0x00, 0x01, 0xff });
	expected.push_back({0x00, 0x00, 0x00, 0x01, 0xaa, 0xbb });
	expected.push_back({0x00, 0x00, 0x00 });

	ASSERT_EQUALS(expected, rec->frames);
}
